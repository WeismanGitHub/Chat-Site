@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

@page "/"
@attribute [Authorize]

@inject AuthenticationStateProvider authProvider;
@inject ProtectedLocalStorage localStorage;
@inject NavigationManager navManager;

@inject IConversationData conversationData;
@inject IUserData userData;

<NavigationBar />

<div class="convos-friends-menu">
    <div class="convos-friends-creation">
        <button @onclick="ConvoInput">
            Create Convo
        </button>
        <button>
            Add Friend
        </button>
    </div>

    <button @onclick="Toggle">
        <div>Convos</div>
        <div>Friends</div>
    </button>

    @{
        void ShowFriend(User friend) {
            <div class="friend">@friend.DisplayName</div>
        }

        void ShowConversation(Conversation conversation) {
            <div class="conversation">@conversation.Name</div>
        }

        void NotFound(string name) {
            <div>No @name Found</div>
        }

        if (selectedToggle == MenuToggle.Convos) {
            if (conversations.Count == 0) {
                NotFound("Convos");
            }

            friends.ForEach(friend => ShowFriend(friend));
        } else {
            if (friends.Count == 0) {
                NotFound("Friends");
            }

            conversations.ForEach(convo => ShowConversation(convo));
        }
    }
</div>

@code {
    private List<Conversation> conversations = new();
    private List<User> friends = new();
    private User loggedInUser;

    private enum MenuToggle { Friends, Convos };
    private MenuToggle selectedToggle;

    protected async override Task OnInitializedAsync() {
        await LoadAndVerifyUser();
        // populate friends/conversations
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender) return;

        var toggleResults = await localStorage.GetAsync<MenuToggle>("MenuToggle");
        selectedToggle = toggleResults.Success ? toggleResults.Value : MenuToggle.Convos;
    }

    public async Task LoadAndVerifyUser() {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if (string.IsNullOrWhiteSpace(objectId)) {
            return;
        }

        loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();

        string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
        string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

        bool isDirty = false;

        if (objectId.Equals(loggedInUser.ObjectIdentifier) == false) {
            isDirty = true;
            loggedInUser.ObjectIdentifier = objectId;
        }

        if (displayName?.Equals(loggedInUser.DisplayName) == false) {
            isDirty = true;
            loggedInUser.DisplayName = displayName;
        }

        if (email?.Equals(loggedInUser.Email) == false) {
            isDirty = true;
            loggedInUser.Email = email;
        }

        if (!isDirty) return;

        if (string.IsNullOrWhiteSpace(loggedInUser.Id)) {
            await userData.CreateUser(loggedInUser);
        } else {
            await userData.UpdateUser(loggedInUser);
        }
    }

    private async void Toggle() {
        selectedToggle = selectedToggle == MenuToggle.Convos ? MenuToggle.Friends : MenuToggle.Convos;
        await localStorage.SetAsync("MenuToggle", selectedToggle);
    }

    private void ConvoInput() {
        string name = "";

        // <div>
        //     <input type="text" @oninput="@{ (s => name = s.Value;)} "/>
        // </div>
    }
}
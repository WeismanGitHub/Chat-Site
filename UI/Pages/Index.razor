@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

@page "/"
@attribute [Authorize]

@inject AuthenticationStateProvider authProvider;
@inject ProtectedLocalStorage localStorage;
@inject NavigationManager navManager;

@inject IConversationData conversationData;
@inject IUserData userData;

<div class="navbar">
    <button @onclick="@(()=>navManager.NavigateTo("/Account"))">
        Account
    </button>
    
    <button @onclick="@(()=>navManager.NavigateTo("/MicrosoftIdentity/Account/SignOut"))">
        Logout
    </button>
</div>

<div class="menu">
    <button @onclick="Toggle">
        <div>Chats</div>
        <div>Friends</div>
    </button>
    @*
    @{
        void ShowFriend(User friend) {
            <div>@friend.DisplayName</div>
        }

        void ShowConversation(Conversation conversation) {
            <div>@conversation.Name</div>
        }

        if (selectedToggle == MenuToggle.Chats) {
            friends.ForEach(friend => ShowFriend(friend));
        } else {
            conversations.ForEach(convo => ShowConversation(convo));
        }
    }
    *@
</div>

@code {
    private List<Conversation> conversations;
    private List<User> friends;
    private User loggedInUser;

    private enum MenuToggle { Friends, Chats };
    private MenuToggle selectedToggle;

    protected async override Task OnInitializedAsync() {
        await LoadAndVerifyUser();
        // populate friends/conversations
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender) return;

        var toggleResults = await localStorage.GetAsync<MenuToggle>("MenuToggle");
        selectedToggle = toggleResults.Success ? toggleResults.Value : MenuToggle.Chats;
    }

    private async Task LoadAndVerifyUser() {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if (string.IsNullOrWhiteSpace(objectId) == false) {
            loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();

            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            bool isDirty = false;

            if (objectId.Equals(loggedInUser.ObjectIdentifier) == false) {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }

            if (displayName?.Equals(loggedInUser.DisplayName) == false) {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }

            if (email?.Equals(loggedInUser.Email) == false) {
                isDirty = true;
                loggedInUser.Email = email;
            }

            if (!isDirty) return;

            if (string.IsNullOrWhiteSpace(loggedInUser.Id)) {
                await userData.CreateUser(loggedInUser);
            } else {
                await userData.UpdateUser(loggedInUser);
            }
        }
    }

    private async void Toggle() {
        selectedToggle = selectedToggle == MenuToggle.Chats ? MenuToggle.Friends : MenuToggle.Chats;
        await localStorage.SetAsync("MenuToggle", selectedToggle);
    }

    private void GetFriends() {

    }

    private void GetConversations() {
        
    }
}